# coding: utf-8

"""
    GNBR Reasoner API

    GNBR Reasoner API  # noqa: E501

    OpenAPI spec version: 0.8.0
    Contact: srensi@stanford.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.result_graph import ResultGraph  # noqa: F401,E501


class Result(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'text': 'str',
        'essence': 'str',
        'row_data': 'list[str]',
        'score': 'float',
        'score_name': 'str',
        'score_direction': 'str',
        'confidence': 'float',
        'result_type': 'str',
        'result_group': 'int',
        'result_group_similarity_score': 'float',
        'reasoner_id': 'str',
        'result_graph': 'ResultGraph'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'text': 'text',
        'essence': 'essence',
        'row_data': 'row_data',
        'score': 'score',
        'score_name': 'score_name',
        'score_direction': 'score_direction',
        'confidence': 'confidence',
        'result_type': 'result_type',
        'result_group': 'result_group',
        'result_group_similarity_score': 'result_group_similarity_score',
        'reasoner_id': 'reasoner_id',
        'result_graph': 'result_graph'
    }

    def __init__(self, id=None, description=None, text=None, essence=None, row_data=None, score=None, score_name=None, score_direction=None, confidence=None, result_type=None, result_group=None, result_group_similarity_score=None, reasoner_id=None, result_graph=None):  # noqa: E501
        """Result - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._description = None
        self._text = None
        self._essence = None
        self._row_data = None
        self._score = None
        self._score_name = None
        self._score_direction = None
        self._confidence = None
        self._result_type = None
        self._result_group = None
        self._result_group_similarity_score = None
        self._reasoner_id = None
        self._result_graph = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if text is not None:
            self.text = text
        if essence is not None:
            self.essence = essence
        if row_data is not None:
            self.row_data = row_data
        if score is not None:
            self.score = score
        if score_name is not None:
            self.score_name = score_name
        if score_direction is not None:
            self.score_direction = score_direction
        if confidence is not None:
            self.confidence = confidence
        if result_type is not None:
            self.result_type = result_type
        if result_group is not None:
            self.result_group = result_group
        if result_group_similarity_score is not None:
            self.result_group_similarity_score = result_group_similarity_score
        if reasoner_id is not None:
            self.reasoner_id = reasoner_id
        if result_graph is not None:
            self.result_graph = result_graph

    @property
    def id(self):
        """Gets the id of this Result.  # noqa: E501

        URI for this response  # noqa: E501

        :return: The id of this Result.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Result.

        URI for this response  # noqa: E501

        :param id: The id of this Result.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this Result.  # noqa: E501

        A free text description of this result answer from the reasoner  # noqa: E501

        :return: The description of this Result.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Result.

        A free text description of this result answer from the reasoner  # noqa: E501

        :param description: The description of this Result.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def text(self):
        """Gets the text of this Result.  # noqa: E501

        DEPRECATED  # noqa: E501

        :return: The text of this Result.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Result.

        DEPRECATED  # noqa: E501

        :param text: The text of this Result.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def essence(self):
        """Gets the essence of this Result.  # noqa: E501

        A single string that is the terse essence of the result (useful for simple answers)  # noqa: E501

        :return: The essence of this Result.  # noqa: E501
        :rtype: str
        """
        return self._essence

    @essence.setter
    def essence(self, essence):
        """Sets the essence of this Result.

        A single string that is the terse essence of the result (useful for simple answers)  # noqa: E501

        :param essence: The essence of this Result.  # noqa: E501
        :type: str
        """

        self._essence = essence

    @property
    def row_data(self):
        """Gets the row_data of this Result.  # noqa: E501

        An arbitrary list of values that captures the essence of the result that can be turned into a tabular result across all answers (each result is a row) for a user that wants tabular output  # noqa: E501

        :return: The row_data of this Result.  # noqa: E501
        :rtype: list[str]
        """
        return self._row_data

    @row_data.setter
    def row_data(self, row_data):
        """Sets the row_data of this Result.

        An arbitrary list of values that captures the essence of the result that can be turned into a tabular result across all answers (each result is a row) for a user that wants tabular output  # noqa: E501

        :param row_data: The row_data of this Result.  # noqa: E501
        :type: list[str]
        """

        self._row_data = row_data

    @property
    def score(self):
        """Gets the score of this Result.  # noqa: E501

        Any type of score associated with this result (highest confidence)  # noqa: E501

        :return: The score of this Result.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Result.

        Any type of score associated with this result (highest confidence)  # noqa: E501

        :param score: The score of this Result.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def score_name(self):
        """Gets the score_name of this Result.  # noqa: E501

        Name for the score  # noqa: E501

        :return: The score_name of this Result.  # noqa: E501
        :rtype: str
        """
        return self._score_name

    @score_name.setter
    def score_name(self, score_name):
        """Sets the score_name of this Result.

        Name for the score  # noqa: E501

        :param score_name: The score_name of this Result.  # noqa: E501
        :type: str
        """

        self._score_name = score_name

    @property
    def score_direction(self):
        """Gets the score_direction of this Result.  # noqa: E501

        Sorting indicator for the score: one of higher_is_better or lower_is_better  # noqa: E501

        :return: The score_direction of this Result.  # noqa: E501
        :rtype: str
        """
        return self._score_direction

    @score_direction.setter
    def score_direction(self, score_direction):
        """Sets the score_direction of this Result.

        Sorting indicator for the score: one of higher_is_better or lower_is_better  # noqa: E501

        :param score_direction: The score_direction of this Result.  # noqa: E501
        :type: str
        """

        self._score_direction = score_direction

    @property
    def confidence(self):
        """Gets the confidence of this Result.  # noqa: E501

        Confidence metric for this result, a value 0.0 (no confidence) and 1.0 (highest confidence)  # noqa: E501

        :return: The confidence of this Result.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Result.

        Confidence metric for this result, a value 0.0 (no confidence) and 1.0 (highest confidence)  # noqa: E501

        :param confidence: The confidence of this Result.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def result_type(self):
        """Gets the result_type of this Result.  # noqa: E501

        One of several possible result types: 'individual query answer', 'neighborhood graph', 'type summary graph'  # noqa: E501

        :return: The result_type of this Result.  # noqa: E501
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this Result.

        One of several possible result types: 'individual query answer', 'neighborhood graph', 'type summary graph'  # noqa: E501

        :param result_type: The result_type of this Result.  # noqa: E501
        :type: str
        """

        self._result_type = result_type

    @property
    def result_group(self):
        """Gets the result_group of this Result.  # noqa: E501

        An integer group number for results for use in cases where several results should be grouped together. Also useful to control sorting ascending.  # noqa: E501

        :return: The result_group of this Result.  # noqa: E501
        :rtype: int
        """
        return self._result_group

    @result_group.setter
    def result_group(self, result_group):
        """Sets the result_group of this Result.

        An integer group number for results for use in cases where several results should be grouped together. Also useful to control sorting ascending.  # noqa: E501

        :param result_group: The result_group of this Result.  # noqa: E501
        :type: int
        """

        self._result_group = result_group

    @property
    def result_group_similarity_score(self):
        """Gets the result_group_similarity_score of this Result.  # noqa: E501

        A score that denotes the similarity of this result to other members of the result_group  # noqa: E501

        :return: The result_group_similarity_score of this Result.  # noqa: E501
        :rtype: float
        """
        return self._result_group_similarity_score

    @result_group_similarity_score.setter
    def result_group_similarity_score(self, result_group_similarity_score):
        """Sets the result_group_similarity_score of this Result.

        A score that denotes the similarity of this result to other members of the result_group  # noqa: E501

        :param result_group_similarity_score: The result_group_similarity_score of this Result.  # noqa: E501
        :type: float
        """

        self._result_group_similarity_score = result_group_similarity_score

    @property
    def reasoner_id(self):
        """Gets the reasoner_id of this Result.  # noqa: E501

        Identifier string of the reasoner that provided this result (e.g., RTX, Robokop, Indigo, Integrator)  # noqa: E501

        :return: The reasoner_id of this Result.  # noqa: E501
        :rtype: str
        """
        return self._reasoner_id

    @reasoner_id.setter
    def reasoner_id(self, reasoner_id):
        """Sets the reasoner_id of this Result.

        Identifier string of the reasoner that provided this result (e.g., RTX, Robokop, Indigo, Integrator)  # noqa: E501

        :param reasoner_id: The reasoner_id of this Result.  # noqa: E501
        :type: str
        """

        self._reasoner_id = reasoner_id

    @property
    def result_graph(self):
        """Gets the result_graph of this Result.  # noqa: E501


        :return: The result_graph of this Result.  # noqa: E501
        :rtype: ResultGraph
        """
        return self._result_graph

    @result_graph.setter
    def result_graph(self, result_graph):
        """Sets the result_graph of this Result.


        :param result_graph: The result_graph of this Result.  # noqa: E501
        :type: ResultGraph
        """

        self._result_graph = result_graph

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Result):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
