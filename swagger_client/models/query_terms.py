# coding: utf-8

"""
    GNBR Reasoner API

    GNBR Reasoner API  # noqa: E501

    OpenAPI spec version: 0.8.0
    Contact: srensi@stanford.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class QueryTerms(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'target': 'str',
        'anatomical_entity': 'str',
        'chemical_substance': 'str',
        'metabolite': 'str'
    }

    attribute_map = {
        'source': 'source',
        'target': 'target',
        'anatomical_entity': 'anatomical_entity',
        'chemical_substance': 'chemical_substance',
        'metabolite': 'metabolite'
    }

    def __init__(self, source=None, target=None, anatomical_entity=None, chemical_substance=None, metabolite=None):  # noqa: E501
        """QueryTerms - a model defined in Swagger"""  # noqa: E501

        self._source = None
        self._target = None
        self._anatomical_entity = None
        self._chemical_substance = None
        self._metabolite = None
        self.discriminator = None

        if source is not None:
            self.source = source
        if target is not None:
            self.target = target
        if anatomical_entity is not None:
            self.anatomical_entity = anatomical_entity
        if chemical_substance is not None:
            self.chemical_substance = chemical_substance
        if metabolite is not None:
            self.metabolite = metabolite

    @property
    def source(self):
        """Gets the source of this QueryTerms.  # noqa: E501


        :return: The source of this QueryTerms.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this QueryTerms.


        :param source: The source of this QueryTerms.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this QueryTerms.  # noqa: E501


        :return: The target of this QueryTerms.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this QueryTerms.


        :param target: The target of this QueryTerms.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def anatomical_entity(self):
        """Gets the anatomical_entity of this QueryTerms.  # noqa: E501


        :return: The anatomical_entity of this QueryTerms.  # noqa: E501
        :rtype: str
        """
        return self._anatomical_entity

    @anatomical_entity.setter
    def anatomical_entity(self, anatomical_entity):
        """Sets the anatomical_entity of this QueryTerms.


        :param anatomical_entity: The anatomical_entity of this QueryTerms.  # noqa: E501
        :type: str
        """

        self._anatomical_entity = anatomical_entity

    @property
    def chemical_substance(self):
        """Gets the chemical_substance of this QueryTerms.  # noqa: E501


        :return: The chemical_substance of this QueryTerms.  # noqa: E501
        :rtype: str
        """
        return self._chemical_substance

    @chemical_substance.setter
    def chemical_substance(self, chemical_substance):
        """Sets the chemical_substance of this QueryTerms.


        :param chemical_substance: The chemical_substance of this QueryTerms.  # noqa: E501
        :type: str
        """

        self._chemical_substance = chemical_substance

    @property
    def metabolite(self):
        """Gets the metabolite of this QueryTerms.  # noqa: E501


        :return: The metabolite of this QueryTerms.  # noqa: E501
        :rtype: str
        """
        return self._metabolite

    @metabolite.setter
    def metabolite(self, metabolite):
        """Sets the metabolite of this QueryTerms.


        :param metabolite: The metabolite of this QueryTerms.  # noqa: E501
        :type: str
        """

        self._metabolite = metabolite

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryTerms):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
