# coding: utf-8

"""
    GNBR Reasoner API

    GNBR Reasoner API  # noqa: E501

    OpenAPI spec version: 0.8.0
    Contact: srensi@stanford.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.edge_attribute import EdgeAttribute  # noqa: F401,E501


class Edge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'relation': 'str',
        'source_id': 'str',
        'target_id': 'str',
        'is_defined_by': 'str',
        'provided_by': 'str',
        'confidence': 'float',
        'publications': 'str',
        'evidence_type': 'str',
        'qualifiers': 'str',
        'negated': 'bool',
        'attribute_list': 'list[EdgeAttribute]'
    }

    attribute_map = {
        'type': 'type',
        'relation': 'relation',
        'source_id': 'source_id',
        'target_id': 'target_id',
        'is_defined_by': 'is_defined_by',
        'provided_by': 'provided_by',
        'confidence': 'confidence',
        'publications': 'publications',
        'evidence_type': 'evidence_type',
        'qualifiers': 'qualifiers',
        'negated': 'negated',
        'attribute_list': 'attribute_list'
    }

    def __init__(self, type=None, relation=None, source_id=None, target_id=None, is_defined_by=None, provided_by=None, confidence=None, publications=None, evidence_type=None, qualifiers=None, negated=None, attribute_list=None):  # noqa: E501
        """Edge - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._relation = None
        self._source_id = None
        self._target_id = None
        self._is_defined_by = None
        self._provided_by = None
        self._confidence = None
        self._publications = None
        self._evidence_type = None
        self._qualifiers = None
        self._negated = None
        self._attribute_list = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if relation is not None:
            self.relation = relation
        if source_id is not None:
            self.source_id = source_id
        if target_id is not None:
            self.target_id = target_id
        if is_defined_by is not None:
            self.is_defined_by = is_defined_by
        if provided_by is not None:
            self.provided_by = provided_by
        if confidence is not None:
            self.confidence = confidence
        if publications is not None:
            self.publications = publications
        if evidence_type is not None:
            self.evidence_type = evidence_type
        if qualifiers is not None:
            self.qualifiers = qualifiers
        if negated is not None:
            self.negated = negated
        if attribute_list is not None:
            self.attribute_list = attribute_list

    @property
    def type(self):
        """Gets the type of this Edge.  # noqa: E501

        Higher-level relationship type of this edge  # noqa: E501

        :return: The type of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Edge.

        Higher-level relationship type of this edge  # noqa: E501

        :param type: The type of this Edge.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def relation(self):
        """Gets the relation of this Edge.  # noqa: E501

        Lower-level relationship type of this edge  # noqa: E501

        :return: The relation of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this Edge.

        Lower-level relationship type of this edge  # noqa: E501

        :param relation: The relation of this Edge.  # noqa: E501
        :type: str
        """

        self._relation = relation

    @property
    def source_id(self):
        """Gets the source_id of this Edge.  # noqa: E501

        Corresponds to the @id of source node of this edge  # noqa: E501

        :return: The source_id of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Edge.

        Corresponds to the @id of source node of this edge  # noqa: E501

        :param source_id: The source_id of this Edge.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def target_id(self):
        """Gets the target_id of this Edge.  # noqa: E501

        Corresponds to the @id of target node of this edge  # noqa: E501

        :return: The target_id of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this Edge.

        Corresponds to the @id of target node of this edge  # noqa: E501

        :param target_id: The target_id of this Edge.  # noqa: E501
        :type: str
        """

        self._target_id = target_id

    @property
    def is_defined_by(self):
        """Gets the is_defined_by of this Edge.  # noqa: E501

        A CURIE/URI for the translator group that made the KG  # noqa: E501

        :return: The is_defined_by of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._is_defined_by

    @is_defined_by.setter
    def is_defined_by(self, is_defined_by):
        """Sets the is_defined_by of this Edge.

        A CURIE/URI for the translator group that made the KG  # noqa: E501

        :param is_defined_by: The is_defined_by of this Edge.  # noqa: E501
        :type: str
        """

        self._is_defined_by = is_defined_by

    @property
    def provided_by(self):
        """Gets the provided_by of this Edge.  # noqa: E501

        A CURIE/URI for the knowledge source that defined this edge  # noqa: E501

        :return: The provided_by of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._provided_by

    @provided_by.setter
    def provided_by(self, provided_by):
        """Sets the provided_by of this Edge.

        A CURIE/URI for the knowledge source that defined this edge  # noqa: E501

        :param provided_by: The provided_by of this Edge.  # noqa: E501
        :type: str
        """

        self._provided_by = provided_by

    @property
    def confidence(self):
        """Gets the confidence of this Edge.  # noqa: E501

        Confidence metric for this edge, a value 0.0 (no confidence) and 1.0 (highest confidence)  # noqa: E501

        :return: The confidence of this Edge.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Edge.

        Confidence metric for this edge, a value 0.0 (no confidence) and 1.0 (highest confidence)  # noqa: E501

        :param confidence: The confidence of this Edge.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def publications(self):
        """Gets the publications of this Edge.  # noqa: E501

        A CURIE/URI for publications associated with this edge  # noqa: E501

        :return: The publications of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._publications

    @publications.setter
    def publications(self, publications):
        """Sets the publications of this Edge.

        A CURIE/URI for publications associated with this edge  # noqa: E501

        :param publications: The publications of this Edge.  # noqa: E501
        :type: str
        """

        self._publications = publications

    @property
    def evidence_type(self):
        """Gets the evidence_type of this Edge.  # noqa: E501

        A CURIE/URI for class of evidence supporting the statement made in an edge - typically a class from the ECO ontology  # noqa: E501

        :return: The evidence_type of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._evidence_type

    @evidence_type.setter
    def evidence_type(self, evidence_type):
        """Sets the evidence_type of this Edge.

        A CURIE/URI for class of evidence supporting the statement made in an edge - typically a class from the ECO ontology  # noqa: E501

        :param evidence_type: The evidence_type of this Edge.  # noqa: E501
        :type: str
        """

        self._evidence_type = evidence_type

    @property
    def qualifiers(self):
        """Gets the qualifiers of this Edge.  # noqa: E501

        Terms representing qualifiers that modify or qualify the meaning of the statement made in an edge  # noqa: E501

        :return: The qualifiers of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._qualifiers

    @qualifiers.setter
    def qualifiers(self, qualifiers):
        """Sets the qualifiers of this Edge.

        Terms representing qualifiers that modify or qualify the meaning of the statement made in an edge  # noqa: E501

        :param qualifiers: The qualifiers of this Edge.  # noqa: E501
        :type: str
        """

        self._qualifiers = qualifiers

    @property
    def negated(self):
        """Gets the negated of this Edge.  # noqa: E501

        Boolean that if set to true, indicates the edge statement is negated i.e. is not true  # noqa: E501

        :return: The negated of this Edge.  # noqa: E501
        :rtype: bool
        """
        return self._negated

    @negated.setter
    def negated(self, negated):
        """Sets the negated of this Edge.

        Boolean that if set to true, indicates the edge statement is negated i.e. is not true  # noqa: E501

        :param negated: The negated of this Edge.  # noqa: E501
        :type: bool
        """

        self._negated = negated

    @property
    def attribute_list(self):
        """Gets the attribute_list of this Edge.  # noqa: E501

        A list of additional attributes for this edge  # noqa: E501

        :return: The attribute_list of this Edge.  # noqa: E501
        :rtype: list[EdgeAttribute]
        """
        return self._attribute_list

    @attribute_list.setter
    def attribute_list(self, attribute_list):
        """Sets the attribute_list of this Edge.

        A list of additional attributes for this edge  # noqa: E501

        :param attribute_list: The attribute_list of this Edge.  # noqa: E501
        :type: list[EdgeAttribute]
        """

        self._attribute_list = attribute_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Edge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
