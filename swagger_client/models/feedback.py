# coding: utf-8

"""
    GNBR Reasoner API

    GNBR Reasoner API  # noqa: E501

    OpenAPI spec version: 0.8.0
    Contact: srensi@stanford.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Feedback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'result_id': 'str',
        'expertise_level_id': 'int',
        'rating_id': 'int',
        'commenter_id': 'int',
        'commenter_full_name': 'str',
        'datetime': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'id': 'id',
        'result_id': 'result_id',
        'expertise_level_id': 'expertise_level_id',
        'rating_id': 'rating_id',
        'commenter_id': 'commenter_id',
        'commenter_full_name': 'commenter_full_name',
        'datetime': 'datetime',
        'comment': 'comment'
    }

    def __init__(self, id=None, result_id=None, expertise_level_id=None, rating_id=None, commenter_id=None, commenter_full_name=None, datetime=None, comment=None):  # noqa: E501
        """Feedback - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._result_id = None
        self._expertise_level_id = None
        self._rating_id = None
        self._commenter_id = None
        self._commenter_full_name = None
        self._datetime = None
        self._comment = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if result_id is not None:
            self.result_id = result_id
        if expertise_level_id is not None:
            self.expertise_level_id = expertise_level_id
        if rating_id is not None:
            self.rating_id = rating_id
        if commenter_id is not None:
            self.commenter_id = commenter_id
        if commenter_full_name is not None:
            self.commenter_full_name = commenter_full_name
        if datetime is not None:
            self.datetime = datetime
        if comment is not None:
            self.comment = comment

    @property
    def id(self):
        """Gets the id of this Feedback.  # noqa: E501

        URI for this feedback item  # noqa: E501

        :return: The id of this Feedback.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Feedback.

        URI for this feedback item  # noqa: E501

        :param id: The id of this Feedback.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def result_id(self):
        """Gets the result_id of this Feedback.  # noqa: E501

        URI for the result that this feedback corresponds to  # noqa: E501

        :return: The result_id of this Feedback.  # noqa: E501
        :rtype: str
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this Feedback.

        URI for the result that this feedback corresponds to  # noqa: E501

        :param result_id: The result_id of this Feedback.  # noqa: E501
        :type: str
        """

        self._result_id = result_id

    @property
    def expertise_level_id(self):
        """Gets the expertise_level_id of this Feedback.  # noqa: E501

        Integer identifier of the claimed expertise level  # noqa: E501

        :return: The expertise_level_id of this Feedback.  # noqa: E501
        :rtype: int
        """
        return self._expertise_level_id

    @expertise_level_id.setter
    def expertise_level_id(self, expertise_level_id):
        """Sets the expertise_level_id of this Feedback.

        Integer identifier of the claimed expertise level  # noqa: E501

        :param expertise_level_id: The expertise_level_id of this Feedback.  # noqa: E501
        :type: int
        """

        self._expertise_level_id = expertise_level_id

    @property
    def rating_id(self):
        """Gets the rating_id of this Feedback.  # noqa: E501

        Integer identifier of the applied rating  # noqa: E501

        :return: The rating_id of this Feedback.  # noqa: E501
        :rtype: int
        """
        return self._rating_id

    @rating_id.setter
    def rating_id(self, rating_id):
        """Sets the rating_id of this Feedback.

        Integer identifier of the applied rating  # noqa: E501

        :param rating_id: The rating_id of this Feedback.  # noqa: E501
        :type: int
        """

        self._rating_id = rating_id

    @property
    def commenter_id(self):
        """Gets the commenter_id of this Feedback.  # noqa: E501

        Integer identifier of the commenter  # noqa: E501

        :return: The commenter_id of this Feedback.  # noqa: E501
        :rtype: int
        """
        return self._commenter_id

    @commenter_id.setter
    def commenter_id(self, commenter_id):
        """Sets the commenter_id of this Feedback.

        Integer identifier of the commenter  # noqa: E501

        :param commenter_id: The commenter_id of this Feedback.  # noqa: E501
        :type: int
        """

        self._commenter_id = commenter_id

    @property
    def commenter_full_name(self):
        """Gets the commenter_full_name of this Feedback.  # noqa: E501

        Full name of the commenter  # noqa: E501

        :return: The commenter_full_name of this Feedback.  # noqa: E501
        :rtype: str
        """
        return self._commenter_full_name

    @commenter_full_name.setter
    def commenter_full_name(self, commenter_full_name):
        """Sets the commenter_full_name of this Feedback.

        Full name of the commenter  # noqa: E501

        :param commenter_full_name: The commenter_full_name of this Feedback.  # noqa: E501
        :type: str
        """

        self._commenter_full_name = commenter_full_name

    @property
    def datetime(self):
        """Gets the datetime of this Feedback.  # noqa: E501

        Datetime when the feedback was provided  # noqa: E501

        :return: The datetime of this Feedback.  # noqa: E501
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this Feedback.

        Datetime when the feedback was provided  # noqa: E501

        :param datetime: The datetime of this Feedback.  # noqa: E501
        :type: str
        """

        self._datetime = datetime

    @property
    def comment(self):
        """Gets the comment of this Feedback.  # noqa: E501

        A free text comment about this result  # noqa: E501

        :return: The comment of this Feedback.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Feedback.

        A free text comment about this result  # noqa: E501

        :param comment: The comment of this Feedback.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Feedback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
