# coding: utf-8

"""
    GNBR Reasoner API

    GNBR Reasoner API  # noqa: E501

    OpenAPI spec version: 0.8.0
    Contact: srensi@stanford.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.query_terms import QueryTerms  # noqa: F401,E501


class Query(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_question': 'str',
        'restated_question': 'str',
        'message': 'str',
        'known_query_type_id': 'str',
        'query_type_id': 'str',
        'bypass_cache': 'str',
        'asynchronous': 'str',
        'options': 'str',
        'max_results': 'int',
        'page_size': 'int',
        'page_number': 'int',
        'terms': 'QueryTerms',
        'reasoner_ids': 'list[str]',
        'query_plan': 'list[object]'
    }

    attribute_map = {
        'original_question': 'original_question',
        'restated_question': 'restated_question',
        'message': 'message',
        'known_query_type_id': 'known_query_type_id',
        'query_type_id': 'query_type_id',
        'bypass_cache': 'bypass_cache',
        'asynchronous': 'asynchronous',
        'options': 'options',
        'max_results': 'max_results',
        'page_size': 'page_size',
        'page_number': 'page_number',
        'terms': 'terms',
        'reasoner_ids': 'reasoner_ids',
        'query_plan': 'query_plan'
    }

    def __init__(self, original_question=None, restated_question=None, message=None, known_query_type_id=None, query_type_id=None, bypass_cache=None, asynchronous=None, options=None, max_results=None, page_size=None, page_number=None, terms=None, reasoner_ids=None, query_plan=None):  # noqa: E501
        """Query - a model defined in Swagger"""  # noqa: E501

        self._original_question = None
        self._restated_question = None
        self._message = None
        self._known_query_type_id = None
        self._query_type_id = None
        self._bypass_cache = None
        self._asynchronous = None
        self._options = None
        self._max_results = None
        self._page_size = None
        self._page_number = None
        self._terms = None
        self._reasoner_ids = None
        self._query_plan = None
        self.discriminator = None

        if original_question is not None:
            self.original_question = original_question
        if restated_question is not None:
            self.restated_question = restated_question
        if message is not None:
            self.message = message
        if known_query_type_id is not None:
            self.known_query_type_id = known_query_type_id
        if query_type_id is not None:
            self.query_type_id = query_type_id
        if bypass_cache is not None:
            self.bypass_cache = bypass_cache
        if asynchronous is not None:
            self.asynchronous = asynchronous
        if options is not None:
            self.options = options
        if max_results is not None:
            self.max_results = max_results
        if page_size is not None:
            self.page_size = page_size
        if page_number is not None:
            self.page_number = page_number
        if terms is not None:
            self.terms = terms
        if reasoner_ids is not None:
            self.reasoner_ids = reasoner_ids
        if query_plan is not None:
            self.query_plan = query_plan

    @property
    def original_question(self):
        """Gets the original_question of this Query.  # noqa: E501

        Original question as it was typed in by the user  # noqa: E501

        :return: The original_question of this Query.  # noqa: E501
        :rtype: str
        """
        return self._original_question

    @original_question.setter
    def original_question(self, original_question):
        """Sets the original_question of this Query.

        Original question as it was typed in by the user  # noqa: E501

        :param original_question: The original_question of this Query.  # noqa: E501
        :type: str
        """

        self._original_question = original_question

    @property
    def restated_question(self):
        """Gets the restated_question of this Query.  # noqa: E501

        Restatement of the question as understood by the translator  # noqa: E501

        :return: The restated_question of this Query.  # noqa: E501
        :rtype: str
        """
        return self._restated_question

    @restated_question.setter
    def restated_question(self, restated_question):
        """Sets the restated_question of this Query.

        Restatement of the question as understood by the translator  # noqa: E501

        :param restated_question: The restated_question of this Query.  # noqa: E501
        :type: str
        """

        self._restated_question = restated_question

    @property
    def message(self):
        """Gets the message of this Query.  # noqa: E501

        Response from the translation engine to the user  # noqa: E501

        :return: The message of this Query.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Query.

        Response from the translation engine to the user  # noqa: E501

        :param message: The message of this Query.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def known_query_type_id(self):
        """Gets the known_query_type_id of this Query.  # noqa: E501

        DEPRECATED in favor of query_type_id  # noqa: E501

        :return: The known_query_type_id of this Query.  # noqa: E501
        :rtype: str
        """
        return self._known_query_type_id

    @known_query_type_id.setter
    def known_query_type_id(self, known_query_type_id):
        """Sets the known_query_type_id of this Query.

        DEPRECATED in favor of query_type_id  # noqa: E501

        :param known_query_type_id: The known_query_type_id of this Query.  # noqa: E501
        :type: str
        """

        self._known_query_type_id = known_query_type_id

    @property
    def query_type_id(self):
        """Gets the query_type_id of this Query.  # noqa: E501

        Identifier for the specific query type  # noqa: E501

        :return: The query_type_id of this Query.  # noqa: E501
        :rtype: str
        """
        return self._query_type_id

    @query_type_id.setter
    def query_type_id(self, query_type_id):
        """Sets the query_type_id of this Query.

        Identifier for the specific query type  # noqa: E501

        :param query_type_id: The query_type_id of this Query.  # noqa: E501
        :type: str
        """

        self._query_type_id = query_type_id

    @property
    def bypass_cache(self):
        """Gets the bypass_cache of this Query.  # noqa: E501

        Set to true in order to bypass any possible cached response and try to answer the query over again  # noqa: E501

        :return: The bypass_cache of this Query.  # noqa: E501
        :rtype: str
        """
        return self._bypass_cache

    @bypass_cache.setter
    def bypass_cache(self, bypass_cache):
        """Sets the bypass_cache of this Query.

        Set to true in order to bypass any possible cached response and try to answer the query over again  # noqa: E501

        :param bypass_cache: The bypass_cache of this Query.  # noqa: E501
        :type: str
        """

        self._bypass_cache = bypass_cache

    @property
    def asynchronous(self):
        """Gets the asynchronous of this Query.  # noqa: E501

        Set to true in order to receive an incomplete response_id if the query will take a while. Client can then periodically request that response_id for a status update and eventual complete response  # noqa: E501

        :return: The asynchronous of this Query.  # noqa: E501
        :rtype: str
        """
        return self._asynchronous

    @asynchronous.setter
    def asynchronous(self, asynchronous):
        """Sets the asynchronous of this Query.

        Set to true in order to receive an incomplete response_id if the query will take a while. Client can then periodically request that response_id for a status update and eventual complete response  # noqa: E501

        :param asynchronous: The asynchronous of this Query.  # noqa: E501
        :type: str
        """

        self._asynchronous = asynchronous

    @property
    def options(self):
        """Gets the options of this Query.  # noqa: E501

        A string of options that can be sent with the query. Options are tool specific and not stipulated here  # noqa: E501

        :return: The options of this Query.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Query.

        A string of options that can be sent with the query. Options are tool specific and not stipulated here  # noqa: E501

        :param options: The options of this Query.  # noqa: E501
        :type: str
        """

        self._options = options

    @property
    def max_results(self):
        """Gets the max_results of this Query.  # noqa: E501

        Maximum number of individual results to return  # noqa: E501

        :return: The max_results of this Query.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this Query.

        Maximum number of individual results to return  # noqa: E501

        :param max_results: The max_results of this Query.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def page_size(self):
        """Gets the page_size of this Query.  # noqa: E501

        Split the results into pages with this number of results each  # noqa: E501

        :return: The page_size of this Query.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this Query.

        Split the results into pages with this number of results each  # noqa: E501

        :param page_size: The page_size of this Query.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def page_number(self):
        """Gets the page_number of this Query.  # noqa: E501

        Page number of results when the number of results exceeds the page_size  # noqa: E501

        :return: The page_number of this Query.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this Query.

        Page number of results when the number of results exceeds the page_size  # noqa: E501

        :param page_number: The page_number of this Query.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def terms(self):
        """Gets the terms of this Query.  # noqa: E501


        :return: The terms of this Query.  # noqa: E501
        :rtype: QueryTerms
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this Query.


        :param terms: The terms of this Query.  # noqa: E501
        :type: QueryTerms
        """

        self._terms = terms

    @property
    def reasoner_ids(self):
        """Gets the reasoner_ids of this Query.  # noqa: E501

        List of reasoners to consult for the query  # noqa: E501

        :return: The reasoner_ids of this Query.  # noqa: E501
        :rtype: list[str]
        """
        return self._reasoner_ids

    @reasoner_ids.setter
    def reasoner_ids(self, reasoner_ids):
        """Sets the reasoner_ids of this Query.

        List of reasoners to consult for the query  # noqa: E501

        :param reasoner_ids: The reasoner_ids of this Query.  # noqa: E501
        :type: list[str]
        """

        self._reasoner_ids = reasoner_ids

    @property
    def query_plan(self):
        """Gets the query_plan of this Query.  # noqa: E501

        List of node types and edge types in a series that constitute a query plan. Experimental.  # noqa: E501

        :return: The query_plan of this Query.  # noqa: E501
        :rtype: list[object]
        """
        return self._query_plan

    @query_plan.setter
    def query_plan(self, query_plan):
        """Sets the query_plan of this Query.

        List of node types and edge types in a series that constitute a query plan. Experimental.  # noqa: E501

        :param query_plan: The query_plan of this Query.  # noqa: E501
        :type: list[object]
        """

        self._query_plan = query_plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Query):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
